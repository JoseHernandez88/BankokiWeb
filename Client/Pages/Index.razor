@layout LoginLayout
@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject Blazored.LocalStorage.ILocalStorageService LocalStore
@using BakokiWeb.Shared
@page "/"


<PageTitle>Index</PageTitle>

<style>
    body {
        background-image: url("../Assets/yunqueBlur.png");
        background-repeat: no-repeat;
        background-attachment: fixed;
        background-size: cover;
    }

    .titleImg {
        border-radius: 10%;
    }

    .titleImgPos {
        margin-left: 1%;
        margin-top: 1%;
    }

    .box {
        width: 30%;
        height: 60%;
    }

    .loginBox {
        background-color: #cbd3d4;
        border-radius: 7%;
        position: absolute;
    }

    .loginboxPos {
        margin-left: 35%;
        margin-top: 5%;
    }

    h1 {
        color: #949259;
        text-align: center;
        margin-bottom: 10%;
    }

    .TextBox {
        width: 57%;
        height: 5%;
        background-color: transparent;
        border-width: 0;
        border-bottom-width: thin;
        font-size: 20px;
        font-family: "Times New Roman", Times, serif;
    }

    .textBoxTitle {
        font-family: "Times New Roman", Times, serif;
    }

    .textBoxPos {
        margin-left: 29%;
        margin-top: 0%;
        margin-bottom: 10%;
    }

    .text {
        text-align: center;
        margin-bottom: 10%;
    }

    .button {
        border: none;
        color: #949259;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        /* margin: 4px 2px; */
        cursor: pointer;
        background-color: white;
        border-radius: 10%;
        font-family: "Times New Roman", Times, serif;
    }

    .registrationButton {
        border: none;
        color: grey;
        padding: 15px 32px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        /* margin: 4px 2px; */
        cursor: pointer;
        background-color: transparent;
        border-radius: 10%;
        font-family: "Times New Roman", Times, serif;
    }

    .registrationButtonPos {
        text-align: center;
        margin-top: 10%;
    }
</style>

<div class="loginboxPos">
    <div class="box loginBox">
        <h1 class="textBoxTitle">Iniciar Secion</h1>

        <form action="/url" method="GET">
            <div class="textBoxPos">
                <input @bind="email" type="text" placeholder="email" class="TextBox" name="Email" />
            </div>

            <div class="textBoxPos">
                <input @bind="contrasena" type="text" placeholder="contrasena" class="TextBox" name="contrasena" />
            </div>
        </form>

        <div class="text">
            <button @onclick="LoginValidation" class="button" href="MainPage">Login</button>
        </div>

        <div class="text">
            <NavLink class="registrationButton" href="Registration">
                Aun no eres un miembro? <span style="color: #949259">Crea una cuenta</span>
            </NavLink>
            <p>@notice</p>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string contrasena { get; set; } 
        = "";
    private string email { get; set; } 
        = "";
    string notice 
        = "";

    protected override async Task OnInitializedAsync()
    {
        var userId = await LocalStore.GetItemAsync<string>("email");
        if(userId is not null)
        {
            NavigationManager.NavigateTo("/MainPage");
        }
    }
    private async void LoginValidation()
    {

        //Cliente? cli = new();
        Cliente? cli = new();
        List<Cliente?> list = new();




        if(contrasena is not null && email is not null)
        {
            if(email.Contains("@") && email.Contains("."))
            {
                try
                {
                    var result = await Http.GetFromJsonAsync<List<Cliente?>>($"api/Cliente/{contrasena}/{email}");
                    
                    


                    if (result != null)
                    {
                        list = result.ToList();

                        if (list.Any())
                        {
                            cli = list.FirstOrDefault();
                            if (cli is null)
                            {
                                //Replace with validatoion false tree.
                                Console.WriteLine("Client value was null.");
                                notice = "Ocurrio un error con su email o contraseña";
                            }
                            else
                            {
                                //Replace with validation posative tree.
                                if(contrasena == cli.Password)
                                {
                                    NavigationManager.NavigateTo($"/MainPage");
                                    //await LocalStore.SetItemAsync(email, cli.email);
                                    await LocalStore.SetItemAsync("email", cli.Email);
                                }
                                else
                                {
                                    notice = "Contraseña incorrecta";
                                }
                                //Console.WriteLine("Last name: ", cli.LastName.ToString());
                            }
                        }
                        else
                        {
                            throw new Exception("Index Page: Has lost a list.");
                        }
                    }
                }
                catch (Exception ex)
                {

                    Console.WriteLine(ex.ToString());
                }
            }
            else
            {
                notice = "Email invalido";
            }
        }
        else
        {
            notice = "Porfavor ingrese su email y su contraseña";
        }
    }
}